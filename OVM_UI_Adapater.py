"""Subclass of OVM_Frame, which is generated by wxFormBuilder."""

import wx
import threading
import OVM_UI
import OVM_Settings_model
from CustomUI.VideoPanel import VideoPanel
from OVM_IPCamera import Camera
from OVM_FileManager import OVM_FileManager

DEBUG = False
# Implementing OVM_Frame
class OVM_UI_Adapater( OVM_UI.OVM_Frame ):
	def __init__( self, parent ):
		OVM_UI.OVM_Frame.__init__( self, parent )

		# Set default configuration
		self.panel_mainsettings.Hide()
		self.panel_mainvideo.Show()
		self.Video_NumFeeds_Sldr.SetValue(4)
		self.Video_AvailCams_chkLst.Clear()

		# Data store Model for Cameras
		self.camera_list = []
		self.enabled_camera_list = []
		self.video_panels = []

		# Data store model for Application settings
		self.settings_model = OVM_Settings_model.OVM_Settings()
		print(self.settings_model.to_String())
		self.load_PreviousSettings()

		if len(self.camera_list) > 0:
			self.populate_PreviousCameras()

		# Populate a debug list of cameras
		if(DEBUG):
			self.debug_populate_cameras()
  
		self.Show()

		#Storage Management System
		self.storage_manager = OVM_FileManager(self.settings_model.get_Savelocation(), 
										 		self.settings_model.get_FileSize(),
												self.settings_model.get_SaveSize())
		
		self.storage_manager.start_monitoring()
		
	def load_PreviousSettings(self):
		# Load setting values
		self.Video_NumFeeds_Sldr.SetValue(self.settings_model.get_VideoFeed())
		
		for camName, camData in self.settings_model.get_CameraModel().items():
			camera = Camera(camName, camData[0])
			camera.set_Enable(camData[1])
			print("Loaded Camera: " + camera.to_String())
			self.camera_list.append(camera)
		
		self.Settings_FileSize_txtCtrl.SetValue(str(self.settings_model.get_FileSize()))
		self.Settings_SaveLoc_dirPck.SetPath(self.settings_model.get_Savelocation())
		self.Settings_StorageSize_txtCtrl.SetValue(str(self.settings_model.get_SaveSize()))
		self.Settings_EnableSave_chkBox.SetValue(self.settings_model.get_EnableSaving())

		self.update_CameraLists()
		return
	
	def populate_PreviousCameras(self):
		self.update_video_panels(len(self.camera_list))
		return
	
	########### Event Handler implementation ###########
	def Handle_App_Close( self, event ):
		self.update_video_panels(0)

		# Save record files or not
		self.settings_model.set_EnableSaving(self.Settings_EnableSave_chkBox.GetValue())
		# Save the File Directory
		self.settings_model.set_SaveLocation(self.Settings_SaveLoc_dirPck.GetPath())
		# Save the Directory Size
		self.settings_model.set_SaveSize(self.Settings_StorageSize_txtCtrl.GetValue())
		# Save the File Size
		self.settings_model.set_FileSize(self.Settings_FileSize_txtCtrl.GetValue())
		#Save the camera model
		for camera in self.camera_list:
			self.settings_model.set_CameraModel(camera.get_Name(), camera.get_Address(), camera.is_Enabled())
		

		self.settings_model.save_settings()
		print("Saved Application Settings, exiting")
		self.Destroy()
		return
	
	def Handle_MenuItem_Video( self, event ):
		self.panel_mainsettings.Hide()
		self.panel_mainvideo.Show()

		self.Layout()
		self.Refresh()
		return

	def Handle_MenuItem_Settings( self, event ):
		self.panel_mainsettings.Show()
		self.panel_mainvideo.Hide()

		self.Layout()
		self.Refresh()
		return

	def Handle_MenuItem_Exit( self, event ):
		nullEvent = wx.CloseEvent()
		self.Handle_App_Close(nullEvent)
		return

	def Handle_Video_NumFeeds( self, event ):
		num_videos = self.Video_NumFeeds_Sldr.GetValue()

		# Only update if the number changed from whats currently displayed
		if(len(self.video_panels) != num_videos):
			self.update_video_panels(num_videos)
		event.Skip()

	def Handle_CameraChkLst_Toggle( self, event ):
		# Get the name and state changed camera
		cam_name = self.Video_AvailCams_chkLst.GetString(event.GetInt())
		cam_state = self.Video_AvailCams_chkLst.IsChecked(event.GetInt())
		print(f"Camera {cam_name} was set to {cam_state}")
		# Find the camera in the list and update its state
		for camera in self.camera_list:
			if camera.get_Name() == cam_name:
				camera.set_Enable(cam_state)

		# Refresh the cameras
		self.update_video_panels(self.Video_NumFeeds_Sldr.GetValue())

		# self.todo_feature_test("Camera: " + str(event.GetInt()) + " " + cam_name)
		event.Skip()

	def Handle_Setting_NewCameraBtn( self, event ):
		name = self.Settings_CamName_txtCtrl.GetValue()
		addr = self.Settings_CamAddr_txtCtrl.GetValue()
		print("Attempt to add camera: " + name + " At Address: " + addr)
		camera = Camera(name, addr)
		self.camera_list.append(camera)

		self.update_CameraLists()

		self.Layout()
		self.Refresh()
		event.Skip()

	def Handle_Setting_RemoveCameraBtn( self, event ):
		self.Settings_CamList_chkLst.GetCheckedStrings()
		self.todo_feature_test()
		event.Skip()

	def Handle_Setting_EnDisSaving( self, event ):
		record_video = self.Settings_EnableSave_chkBox.GetValue()
		wx.MessageBox("Enable Saving is: " + str(record_video))
		# if(event.GetValue()):
		for video in self.video_panels:
			if(record_video):
				video.start_recording()
			else:
				video.stop_recording()

		event.Skip()

	def Handle_Setting_SaveLocation( self, event ):
		self.settings_model.set_SaveLocation(event.GetPath())
		self.Settings_SaveLoc_dirPck.SetPath(event.GetPath())
		event.Skip()

	def Handle_Setting_SaveSettings(self, event):
		# Save If recording is enabled
		self.settings_model.set_EnableSaving(self.Settings_EnableSave_chkBox.GetValue())
		# Save the File Directory
		self.settings_model.set_SaveLocation(self.Settings_SaveLoc_dirPck.GetPath())
		# Save the Directory Size
		self.settings_model.set_SaveSize(self.Settings_StorageSize_txtCtrl.GetValue())
		# Save the File Size
		recording_time = int(self.Settings_FileSize_txtCtrl.GetValue())
		self.settings_model.set_FileSize(recording_time)
		for video in self.video_panels:
			video.set_duration(recording_time)
		
		self.Settings_SaveSettings_btn.SetLabel("Saved!")
		threading.Timer(3.0, self.reset_SaveSettings_btn).start()
		event.Skip()

	def reset_SaveSettings_btn(self):
		self.Settings_SaveSettings_btn.SetLabel("Save Settings")

	########### End Event Handler Implementation ###########

	def update_video_panels(self, num_feeds):
		# TODO: Redo this such that enabled cameras is taken into account:
			# If Cycling enabled
				# cycle through camera feeds by hiding/showing feeds
			# else
				# show only the first n (where n = number of feeds) cameras, hide rest
		#Stop and remove existing panels if reducing the number
		while len(self.video_panels) > num_feeds:
			videoPanel = self.video_panels.pop()
			
			videoPanel.stop_stream()
			videoPanel.Destroy()

		# Create new panels if increasing the number, Add to tracking list, add to the sizer
		while len(self.video_panels) < num_feeds:
			videoPanel = VideoPanel(self.panel_mainvideo, rtsp_url=0, savePath=self.settings_model.get_Savelocation(), videoDuration=self.settings_model.get_FileSize())
			self.video_panels.append(videoPanel)
			self.gridsizer_videofeeds.Add(videoPanel,1,wx.EXPAND)

		# Get a list of enabled cameras
		enabled_cameras = self.get_Enabled_Cameras()

		# Set sources and Restart Streams on the panels
		for panel_num, selectedPanel in enumerate(self.video_panels):
			if(len(enabled_cameras) > panel_num):
				camera_feed = enabled_cameras[panel_num].get_Address()
				if camera_feed == "localhost":
					camera_feed = 0
			else:
				break
			print("Setting source of panel: " + str(panel_num) + " to: " + str(camera_feed))
			selectedPanel.set_source(camera_feed)
			selectedPanel.set_name(enabled_cameras[panel_num].get_Name())
			selectedPanel.start_stream()

		#Update layout and refresh
		if(num_feeds == 1):
			self.gridsizer_videofeeds.SetCols(1)
		else:
			self.gridsizer_videofeeds.SetCols(2)
		
		self.gridsizer_videofeeds.Layout()
		self.Layout()

	def get_Enabled_Cameras(self):
		enabled_cameras = []
		for camera in self.camera_list:
			if camera.is_Enabled():
				enabled_cameras.append(camera)
		return enabled_cameras
	
	def update_CameraLists(self):
		#clean out the Video Feed panel  and setting panel lists
		self.Video_AvailCams_chkLst.Clear()
		self.Settings_CamList_chkLst.Clear()

		#Repopulate both
		for camera in self.camera_list:
			index = self.Video_AvailCams_chkLst.Append(camera.get_Name())
			if camera.is_Enabled():
				self.Video_AvailCams_chkLst.Check(index)
			self.Settings_CamList_chkLst.Append(camera.get_Name())

		return
	
	def todo_feature_test(self, string = "Todo Feature"):
		wx.MessageBox(string)
		return
	
	def debug_populate_cameras(self):
		"rtsp://ekbc:7478sm@mobileb-smith.hopto.org/channel=1"
		"rtsp://raf:rafraf@mobilebsmith.hopto.org/main_1"
		"192.168.43.100"
		"rtsp://raf:rafraf@142.196.231.255?stream=1.sdp" "rtsp://raf:rafraf@142.196.231.255?stream=2.sdp"
		"rtsp://142.196.231.255:554/user=raf&password=rafraf&channel=1&stream=1.sdp"
		"rtsp://192.168.43.100:554/user=raf&password=rafraf&channel=1&stream=1.sdp"
		"rtsp://raf:rafraf@mobilebsmith.hopto.org/channel=1?stream=1.sdp"
		address_list = [
				"rtsp://raf:rafraf@mobilebsmith.hopto.org/channel=1?stream=1.sdp",
				"rtsp://raf:rafraf@mobilebsmith.hopto.org/channel=2?stream=1.sdp",
				"rtsp://raf:rafraf@mobilebsmith.hopto.org/channel=3?stream=1.sdp",
				"rtsp://raf:rafraf@mobilebsmith.hopto.org/channel=4?stream=1.sdp"
				]
		# address_list = ["rtsp://142.196.231.255:554/user=raf&password=rafraf&channel=1&stream=1.sdp","rtsp://142.196.231.255:554/user=raf&password=rafraf&channel=2&stream=1.sdp", "rtsp://142.196.231.255:554/user=raf&password=rafraf&channel=3&stream=1.sdp","rtsp://142.196.231.255:554/user=raf&password=rafraf&channel=4&stream=1.sdp"]
		for num, address in  enumerate(address_list):
			name = "Debug Camera " + str(num)
			camera = Camera(name, address)
			camera.enable()
			print("Added " + camera.to_String())
			self.camera_list.append(camera)
			self.update_CameraLists()
		
		self.update_video_panels(len(address_list))
			
